/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Sensor Data type describes the data stream that comes from the sensors
 * This is to follow the “Separate of Concerns” principle.
 * 
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-06-08")
public class SensorData implements org.apache.thrift.TBase<SensorData, SensorData._Fields>, java.io.Serializable, Cloneable, Comparable<SensorData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SensorData");

  private static final org.apache.thrift.protocol.TField SENSOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sensorType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TEMPERATURE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("temperatureValue", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HUMIDITY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("humidityValue", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FLUID_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fluidValue", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SensorDataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SensorDataTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String sensorType; // required
  public @org.apache.thrift.annotation.Nullable String temperatureValue; // required
  public @org.apache.thrift.annotation.Nullable String humidityValue; // required
  public @org.apache.thrift.annotation.Nullable String fluidValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENSOR_TYPE((short)1, "sensorType"),
    TEMPERATURE_VALUE((short)2, "temperatureValue"),
    HUMIDITY_VALUE((short)3, "humidityValue"),
    FLUID_VALUE((short)4, "fluidValue");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENSOR_TYPE
          return SENSOR_TYPE;
        case 2: // TEMPERATURE_VALUE
          return TEMPERATURE_VALUE;
        case 3: // HUMIDITY_VALUE
          return HUMIDITY_VALUE;
        case 4: // FLUID_VALUE
          return FLUID_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENSOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sensorType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEMPERATURE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("temperatureValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HUMIDITY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("humidityValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLUID_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fluidValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SensorData.class, metaDataMap);
  }

  public SensorData() {
  }

  public SensorData(
    String sensorType,
    String temperatureValue,
    String humidityValue,
    String fluidValue)
  {
    this();
    this.sensorType = sensorType;
    this.temperatureValue = temperatureValue;
    this.humidityValue = humidityValue;
    this.fluidValue = fluidValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SensorData(SensorData other) {
    if (other.isSetSensorType()) {
      this.sensorType = other.sensorType;
    }
    if (other.isSetTemperatureValue()) {
      this.temperatureValue = other.temperatureValue;
    }
    if (other.isSetHumidityValue()) {
      this.humidityValue = other.humidityValue;
    }
    if (other.isSetFluidValue()) {
      this.fluidValue = other.fluidValue;
    }
  }

  public SensorData deepCopy() {
    return new SensorData(this);
  }

  @Override
  public void clear() {
    this.sensorType = null;
    this.temperatureValue = null;
    this.humidityValue = null;
    this.fluidValue = null;
  }

  @org.apache.thrift.annotation.Nullable
  public String getSensorType() {
    return this.sensorType;
  }

  public SensorData setSensorType(@org.apache.thrift.annotation.Nullable String sensorType) {
    this.sensorType = sensorType;
    return this;
  }

  public void unsetSensorType() {
    this.sensorType = null;
  }

  /** Returns true if field sensorType is set (has been assigned a value) and false otherwise */
  public boolean isSetSensorType() {
    return this.sensorType != null;
  }

  public void setSensorTypeIsSet(boolean value) {
    if (!value) {
      this.sensorType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getTemperatureValue() {
    return this.temperatureValue;
  }

  public SensorData setTemperatureValue(@org.apache.thrift.annotation.Nullable String temperatureValue) {
    this.temperatureValue = temperatureValue;
    return this;
  }

  public void unsetTemperatureValue() {
    this.temperatureValue = null;
  }

  /** Returns true if field temperatureValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTemperatureValue() {
    return this.temperatureValue != null;
  }

  public void setTemperatureValueIsSet(boolean value) {
    if (!value) {
      this.temperatureValue = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getHumidityValue() {
    return this.humidityValue;
  }

  public SensorData setHumidityValue(@org.apache.thrift.annotation.Nullable String humidityValue) {
    this.humidityValue = humidityValue;
    return this;
  }

  public void unsetHumidityValue() {
    this.humidityValue = null;
  }

  /** Returns true if field humidityValue is set (has been assigned a value) and false otherwise */
  public boolean isSetHumidityValue() {
    return this.humidityValue != null;
  }

  public void setHumidityValueIsSet(boolean value) {
    if (!value) {
      this.humidityValue = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public String getFluidValue() {
    return this.fluidValue;
  }

  public SensorData setFluidValue(@org.apache.thrift.annotation.Nullable String fluidValue) {
    this.fluidValue = fluidValue;
    return this;
  }

  public void unsetFluidValue() {
    this.fluidValue = null;
  }

  /** Returns true if field fluidValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFluidValue() {
    return this.fluidValue != null;
  }

  public void setFluidValueIsSet(boolean value) {
    if (!value) {
      this.fluidValue = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case SENSOR_TYPE:
      if (value == null) {
        unsetSensorType();
      } else {
        setSensorType((String)value);
      }
      break;

    case TEMPERATURE_VALUE:
      if (value == null) {
        unsetTemperatureValue();
      } else {
        setTemperatureValue((String)value);
      }
      break;

    case HUMIDITY_VALUE:
      if (value == null) {
        unsetHumidityValue();
      } else {
        setHumidityValue((String)value);
      }
      break;

    case FLUID_VALUE:
      if (value == null) {
        unsetFluidValue();
      } else {
        setFluidValue((String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENSOR_TYPE:
      return getSensorType();

    case TEMPERATURE_VALUE:
      return getTemperatureValue();

    case HUMIDITY_VALUE:
      return getHumidityValue();

    case FLUID_VALUE:
      return getFluidValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENSOR_TYPE:
      return isSetSensorType();
    case TEMPERATURE_VALUE:
      return isSetTemperatureValue();
    case HUMIDITY_VALUE:
      return isSetHumidityValue();
    case FLUID_VALUE:
      return isSetFluidValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof SensorData)
      return this.equals((SensorData)that);
    return false;
  }

  public boolean equals(SensorData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sensorType = true && this.isSetSensorType();
    boolean that_present_sensorType = true && that.isSetSensorType();
    if (this_present_sensorType || that_present_sensorType) {
      if (!(this_present_sensorType && that_present_sensorType))
        return false;
      if (!this.sensorType.equals(that.sensorType))
        return false;
    }

    boolean this_present_temperatureValue = true && this.isSetTemperatureValue();
    boolean that_present_temperatureValue = true && that.isSetTemperatureValue();
    if (this_present_temperatureValue || that_present_temperatureValue) {
      if (!(this_present_temperatureValue && that_present_temperatureValue))
        return false;
      if (!this.temperatureValue.equals(that.temperatureValue))
        return false;
    }

    boolean this_present_humidityValue = true && this.isSetHumidityValue();
    boolean that_present_humidityValue = true && that.isSetHumidityValue();
    if (this_present_humidityValue || that_present_humidityValue) {
      if (!(this_present_humidityValue && that_present_humidityValue))
        return false;
      if (!this.humidityValue.equals(that.humidityValue))
        return false;
    }

    boolean this_present_fluidValue = true && this.isSetFluidValue();
    boolean that_present_fluidValue = true && that.isSetFluidValue();
    if (this_present_fluidValue || that_present_fluidValue) {
      if (!(this_present_fluidValue && that_present_fluidValue))
        return false;
      if (!this.fluidValue.equals(that.fluidValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSensorType()) ? 131071 : 524287);
    if (isSetSensorType())
      hashCode = hashCode * 8191 + sensorType.hashCode();

    hashCode = hashCode * 8191 + ((isSetTemperatureValue()) ? 131071 : 524287);
    if (isSetTemperatureValue())
      hashCode = hashCode * 8191 + temperatureValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetHumidityValue()) ? 131071 : 524287);
    if (isSetHumidityValue())
      hashCode = hashCode * 8191 + humidityValue.hashCode();

    hashCode = hashCode * 8191 + ((isSetFluidValue()) ? 131071 : 524287);
    if (isSetFluidValue())
      hashCode = hashCode * 8191 + fluidValue.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SensorData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetSensorType(), other.isSetSensorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSensorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sensorType, other.sensorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTemperatureValue(), other.isSetTemperatureValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemperatureValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temperatureValue, other.temperatureValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetHumidityValue(), other.isSetHumidityValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHumidityValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.humidityValue, other.humidityValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetFluidValue(), other.isSetFluidValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFluidValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fluidValue, other.fluidValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SensorData(");
    boolean first = true;

    sb.append("sensorType:");
    if (this.sensorType == null) {
      sb.append("null");
    } else {
      sb.append(this.sensorType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("temperatureValue:");
    if (this.temperatureValue == null) {
      sb.append("null");
    } else {
      sb.append(this.temperatureValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("humidityValue:");
    if (this.humidityValue == null) {
      sb.append("null");
    } else {
      sb.append(this.humidityValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fluidValue:");
    if (this.fluidValue == null) {
      sb.append("null");
    } else {
      sb.append(this.fluidValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SensorDataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensorDataStandardScheme getScheme() {
      return new SensorDataStandardScheme();
    }
  }

  private static class SensorDataStandardScheme extends org.apache.thrift.scheme.StandardScheme<SensorData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SensorData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENSOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sensorType = iprot.readString();
              struct.setSensorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEMPERATURE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.temperatureValue = iprot.readString();
              struct.setTemperatureValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HUMIDITY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.humidityValue = iprot.readString();
              struct.setHumidityValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLUID_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fluidValue = iprot.readString();
              struct.setFluidValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SensorData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sensorType != null) {
        oprot.writeFieldBegin(SENSOR_TYPE_FIELD_DESC);
        oprot.writeString(struct.sensorType);
        oprot.writeFieldEnd();
      }
      if (struct.temperatureValue != null) {
        oprot.writeFieldBegin(TEMPERATURE_VALUE_FIELD_DESC);
        oprot.writeString(struct.temperatureValue);
        oprot.writeFieldEnd();
      }
      if (struct.humidityValue != null) {
        oprot.writeFieldBegin(HUMIDITY_VALUE_FIELD_DESC);
        oprot.writeString(struct.humidityValue);
        oprot.writeFieldEnd();
      }
      if (struct.fluidValue != null) {
        oprot.writeFieldBegin(FLUID_VALUE_FIELD_DESC);
        oprot.writeString(struct.fluidValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SensorDataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SensorDataTupleScheme getScheme() {
      return new SensorDataTupleScheme();
    }
  }

  private static class SensorDataTupleScheme extends org.apache.thrift.scheme.TupleScheme<SensorData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SensorData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSensorType()) {
        optionals.set(0);
      }
      if (struct.isSetTemperatureValue()) {
        optionals.set(1);
      }
      if (struct.isSetHumidityValue()) {
        optionals.set(2);
      }
      if (struct.isSetFluidValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSensorType()) {
        oprot.writeString(struct.sensorType);
      }
      if (struct.isSetTemperatureValue()) {
        oprot.writeString(struct.temperatureValue);
      }
      if (struct.isSetHumidityValue()) {
        oprot.writeString(struct.humidityValue);
      }
      if (struct.isSetFluidValue()) {
        oprot.writeString(struct.fluidValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SensorData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.sensorType = iprot.readString();
        struct.setSensorTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.temperatureValue = iprot.readString();
        struct.setTemperatureValueIsSet(true);
      }
      if (incoming.get(2)) {
        struct.humidityValue = iprot.readString();
        struct.setHumidityValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fluidValue = iprot.readString();
        struct.setFluidValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

